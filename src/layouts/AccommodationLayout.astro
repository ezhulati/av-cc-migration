---
/**
 * World-Class Accommodation Layout - 2025 Edition
 * Symmetrical, no wasted space, showcases ALL hotel data beautifully
 */

import BaseLayout from './BaseLayout.astro';
import type { CollectionEntry } from 'astro:content';

export interface Props {
  accommodation: CollectionEntry<'accommodation'>;
}

const { accommodation } = Astro.props;
const { Content } = await accommodation.render();

const {
  title,
  description,
  location,
  city,
  address,
  featuredImage,
  images,
  amenities,
  price,
  priceFrom,
  rating,
  ratingWords,
  numberOfReviews,
  ratings,
  reviews,
  roomTypes,
  nearbyAttractions,
  nearbyRestaurants,
  nearbyBeaches,
  whatsNearby,
  airports,
  paymentMethods,
  accommodationType,
  starRating,
  bookingURL,
  language,
  slug,
  coordinates,
  bestFor,
} = accommodation.data;

// Combine featured image with gallery images
const allImages = [featuredImage, ...(images || [])].filter(Boolean) as string[];
const hasMultipleImages = allImages.length > 1;

// Calculate if we have detailed ratings
const hasDetailedRatings = ratings && rating && rating > 0;
---

<BaseLayout
  title={title}
  description={description}
  canonical={`https://albaniavisit.com/${language === 'sq' ? 'sq/akomodimi' : 'accommodation'}/${slug}/`}
  image={featuredImage}
  type="website"
  language={language}
>
  <article class="hotel-page">
    <!-- Hero Section with Gallery -->
    <section class="hero-gallery">
      <div class="gallery-container">
        {hasMultipleImages ? (
          <div class="gallery-grid">
            <button class="main-image" data-image-index="0">
              <img src={allImages[0]} alt={title} loading="eager" />
            </button>
            <div class="side-images">
              {allImages.slice(1, 5).map((image, index) => (
                <button class="side-image" data-image-index={index + 1}>
                  <img src={image} alt={`${title} - ${index + 2}`} loading="lazy" />
                  {index === 3 && allImages.length > 5 && (
                    <div class="more-photos-overlay">
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="7" height="7"/><rect x="14" y="3" width="7" height="7"/>
                        <rect x="14" y="14" width="7" height="7"/><rect x="3" y="14" width="7" height="7"/>
                      </svg>
                      <span>+{allImages.length - 5} photos</span>
                    </div>
                  )}
                </button>
              ))}
            </div>
          </div>
        ) : (
          <div class="single-image">
            <img src={allImages[0]} alt={title} loading="eager" />
          </div>
        )}

        <button class="view-all-photos" id="viewAllPhotos">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="3" width="7" height="7"/><rect x="14" y="3" width="7" height="7"/>
            <rect x="14" y="14" width="7" height="7"/><rect x="3" y="14" width="7" height="7"/>
          </svg>
          Show all {allImages.length} photos
        </button>
      </div>
    </section>

    <!-- Main Content -->
    <div class="content-container">
      <div class="content-grid">
        <!-- Left Column: Hotel Info -->
        <div class="main-content">
          <!-- Header -->
          <header class="hotel-header">
            <div class="header-top">
              {accommodationType && (
                <span class="property-type">{accommodationType.charAt(0).toUpperCase() + accommodationType.slice(1)}</span>
              )}
              {starRating && starRating > 0 && (
                <div class="star-rating">
                  {[...Array(5)].map((_, i) => (
                    <span class={i < starRating ? 'star filled' : 'star'}>â˜…</span>
                  ))}
                </div>
              )}
            </div>

            <h1>{title}</h1>

            <div class="location-info">
              <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/>
                <circle cx="12" cy="10" r="3"/>
              </svg>
              <span>{address || location || city}</span>
            </div>

            {rating && rating > 0 && (
              <div class="rating-badge">
                <div class="rating-score">{rating.toFixed(1)}</div>
                <div class="rating-details">
                  <strong>{ratingWords || 'Very Good'}</strong>
                  {numberOfReviews && numberOfReviews > 0 && (
                    <span>{numberOfReviews.toLocaleString()} reviews</span>
                  )}
                </div>
              </div>
            )}
          </header>

          <!-- Description -->
          <section class="description-section">
            <h2>About This Property</h2>
            <div class="description-content">
              <Content />
            </div>
          </section>

          <!-- Amenities Grid -->
          {amenities && amenities.length > 0 && (
            <section class="amenities-section">
              <h2>Popular Amenities</h2>
              <div class="amenities-grid">
                {amenities.map(amenity => (
                  <div class="amenity-item">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polyline points="20 6 9 17 4 12"/>
                    </svg>
                    <span>{amenity}</span>
                  </div>
                ))}
              </div>
            </section>
          )}

          <!-- Room Types -->
          {roomTypes && roomTypes.length > 0 && (
            <section class="rooms-section">
              <h2>Available Rooms</h2>
              <div class="rooms-grid">
                {roomTypes.map(room => (
                  <div class="room-card">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                    </svg>
                    <span>{room}</span>
                  </div>
                ))}
              </div>
            </section>
          )}

          <!-- Detailed Ratings -->
          {hasDetailedRatings && (
            <section class="detailed-ratings">
              <h2>Guest Ratings</h2>
              <div class="ratings-grid">
                {ratings.location > 0 && (
                  <div class="rating-bar">
                    <div class="rating-bar-header">
                      <span>Location</span>
                      <strong>{ratings.location.toFixed(1)}</strong>
                    </div>
                    <div class="bar-track">
                      <div class="bar-fill" style={`width: ${(ratings.location / 10) * 100}%`}></div>
                    </div>
                  </div>
                )}
                {ratings.cleanliness > 0 && (
                  <div class="rating-bar">
                    <div class="rating-bar-header">
                      <span>Cleanliness</span>
                      <strong>{ratings.cleanliness.toFixed(1)}</strong>
                    </div>
                    <div class="bar-track">
                      <div class="bar-fill" style={`width: ${(ratings.cleanliness / 10) * 100}%`}></div>
                    </div>
                  </div>
                )}
                {ratings.comfort > 0 && (
                  <div class="rating-bar">
                    <div class="rating-bar-header">
                      <span>Comfort</span>
                      <strong>{ratings.comfort.toFixed(1)}</strong>
                    </div>
                    <div class="bar-track">
                      <div class="bar-fill" style={`width: ${(ratings.comfort / 10) * 100}%`}></div>
                    </div>
                  </div>
                )}
                {ratings.facilities > 0 && (
                  <div class="rating-bar">
                    <div class="rating-bar-header">
                      <span>Facilities</span>
                      <strong>{ratings.facilities.toFixed(1)}</strong>
                    </div>
                    <div class="bar-track">
                      <div class="bar-fill" style={`width: ${(ratings.facilities / 10) * 100}%`}></div>
                    </div>
                  </div>
                )}
                {ratings.staff > 0 && (
                  <div class="rating-bar">
                    <div class="rating-bar-header">
                      <span>Staff</span>
                      <strong>{ratings.staff.toFixed(1)}</strong>
                    </div>
                    <div class="bar-track">
                      <div class="bar-fill" style={`width: ${(ratings.staff / 10) * 100}%`}></div>
                    </div>
                  </div>
                )}
                {ratings.value > 0 && (
                  <div class="rating-bar">
                    <div class="rating-bar-header">
                      <span>Value for Money</span>
                      <strong>{ratings.value.toFixed(1)}</strong>
                    </div>
                    <div class="bar-track">
                      <div class="bar-fill" style={`width: ${(ratings.value / 10) * 100}%`}></div>
                    </div>
                  </div>
                )}
                {ratings.wifi > 0 && (
                  <div class="rating-bar">
                    <div class="rating-bar-header">
                      <span>Free WiFi</span>
                      <strong>{ratings.wifi.toFixed(1)}</strong>
                    </div>
                    <div class="bar-track">
                      <div class="bar-fill" style={`width: ${(ratings.wifi / 10) * 100}%`}></div>
                    </div>
                  </div>
                )}
              </div>
            </section>
          )}

          <!-- Guest Reviews -->
          {reviews && reviews.length > 0 && (
            <section class="reviews-section">
              <h2>Guest Reviews</h2>
              <div class="reviews-grid">
                {reviews.map(review => (
                  <div class="review-card">
                    <div class="review-header">
                      <div class="reviewer-avatar">
                        {review.name.charAt(0).toUpperCase()}
                      </div>
                      <div>
                        <strong>{review.name}</strong>
                        <span class="reviewer-country">{review.country}</span>
                      </div>
                    </div>
                    <p class="review-text">"{review.text}"</p>
                  </div>
                ))}
              </div>
            </section>
          )}
        </div>

        <!-- Right Column: Location & Booking Info -->
        <aside class="sidebar">
          <!-- Booking Card -->
          <div class="booking-card sticky">
            {price && (
              <div class="price-section">
                <span class="price-label">From</span>
                <div class="price-amount">{price}</div>
                <span class="price-note">per night</span>
              </div>
            )}

            <a
              href={bookingURL || `https://www.booking.com/searchresults.html?ss=${encodeURIComponent(city || location || title)}&aid=8035640`}
              target="_blank"
              rel="noopener noreferrer"
              class="book-now-btn"
            >
              <span>Check Availability on Booking.com</span>
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/>
                <polyline points="15 3 21 3 21 9"/>
                <line x1="10" y1="14" x2="21" y2="3"/>
              </svg>
            </a>

            {bestFor && (
              <div class="best-for-badge">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
                {bestFor}
              </div>
            )}

            <div class="booking-features">
              <div class="feature">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="20 6 9 17 4 12"/>
                </svg>
                <span>Free cancellation</span>
              </div>
              <div class="feature">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="20 6 9 17 4 12"/>
                </svg>
                <span>No payment needed today</span>
              </div>
              <div class="feature">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="20 6 9 17 4 12"/>
                </svg>
                <span>Instant confirmation</span>
              </div>
            </div>

            {paymentMethods && paymentMethods.length > 0 && (
              <div class="payment-methods">
                <span class="payment-label">We accept:</span>
                <div class="payment-icons">
                  {paymentMethods.map(method => (
                    <div class="payment-icon">{method}</div>
                  ))}
                </div>
              </div>
            )}
          </div>

          <!-- Nearby Beaches -->
          {nearbyBeaches && nearbyBeaches.length > 0 && (
            <div class="info-card">
              <h3>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 2v20M2 12h20M6.5 2v20M17.5 2v20"/>
                </svg>
                Nearby Beaches
              </h3>
              <ul>
                {nearbyBeaches.map(beach => (
                  <li>{beach}</li>
                ))}
              </ul>
            </div>
          )}

          <!-- Nearby Attractions -->
          {nearbyAttractions && nearbyAttractions.length > 0 && (
            <div class="info-card">
              <h3>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/>
                  <circle cx="12" cy="10" r="3"/>
                </svg>
                Top Attractions
              </h3>
              <ul>
                {nearbyAttractions.slice(0, 8).map(attraction => (
                  <li>{attraction}</li>
                ))}
              </ul>
            </div>
          )}

          <!-- Nearby Restaurants -->
          {nearbyRestaurants && nearbyRestaurants.length > 0 && (
            <div class="info-card">
              <h3>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2M7 2v20M21 15V2a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3Zm0 0v7"/>
                </svg>
                Restaurants Nearby
              </h3>
              <ul>
                {nearbyRestaurants.map(restaurant => (
                  <li>{restaurant}</li>
                ))}
              </ul>
            </div>
          )}

          <!-- What's Nearby -->
          {whatsNearby && whatsNearby.length > 0 && (
            <div class="info-card">
              <h3>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"/>
                  <path d="M12 6v6l4 2"/>
                </svg>
                What's Nearby
              </h3>
              <ul>
                {whatsNearby.slice(0, 8).map(place => (
                  <li>{place}</li>
                ))}
              </ul>
            </div>
          )}

          <!-- Airports -->
          {airports && airports.length > 0 && (
            <div class="info-card">
              <h3>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z"/>
                </svg>
                Nearest Airports
              </h3>
              <ul>
                {airports.map(airport => (
                  <li>{airport}</li>
                ))}
              </ul>
            </div>
          )}
        </aside>
      </div>
    </div>

    <!-- Lightbox -->
    <div class="lightbox" id="lightbox">
      <button class="lightbox-close">
        <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/>
        </svg>
      </button>

      <button class="lightbox-prev">
        <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15 18 9 12 15 6"/>
        </svg>
      </button>

      <img class="lightbox-image" src="" alt="" />

      <button class="lightbox-next">
        <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="9 18 15 12 9 6"/>
        </svg>
      </button>

      <div class="lightbox-counter">
        <span class="current-index">1</span> / <span class="total-images">{allImages.length}</span>
      </div>
    </div>
  </article>
</BaseLayout>

<style>
  /* Reset & Base */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  .hotel-page {
    background: #f8f9fa;
    min-height: 100vh;
  }

  /* Hero Gallery */
  .hero-gallery {
    background: #000;
    width: 100%;
  }

  .gallery-container {
    max-width: 1400px;
    margin: 0 auto;
    position: relative;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 8px;
    height: 600px;
  }

  .main-image {
    width: 100%;
    height: 100%;
    overflow: hidden;
    border: none;
    padding: 0;
    cursor: pointer;
    position: relative;
  }

  .main-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s;
  }

  .main-image:hover img {
    transform: scale(1.05);
  }

  .side-images {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 8px;
  }

  .side-image {
    width: 100%;
    height: 100%;
    overflow: hidden;
    border: none;
    padding: 0;
    cursor: pointer;
    position: relative;
  }

  .side-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s;
  }

  .side-image:hover img {
    transform: scale(1.05);
  }

  .more-photos-overlay {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: white;
    gap: 8px;
    font-size: 18px;
    font-weight: 600;
  }

  .view-all-photos {
    position: absolute;
    bottom: 24px;
    right: 24px;
    background: white;
    border: none;
    padding: 12px 24px;
    border-radius: 8px;
    font-size: 15px;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.2s;
    z-index: 10;
  }

  .view-all-photos:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
  }

  .single-image {
    height: 500px;
    overflow: hidden;
  }

  .single-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Content Container */
  .content-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 40px 24px;
  }

  .content-grid {
    display: grid;
    grid-template-columns: 1fr 400px;
    gap: 40px;
    align-items: start;
  }

  /* Hotel Header */
  .hotel-header {
    background: white;
    padding: 32px;
    border-radius: 16px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    margin-bottom: 24px;
  }

  .header-top {
    display: flex;
    align-items: center;
    gap: 16px;
    margin-bottom: 16px;
  }

  .property-type {
    background: #e8f4fd;
    color: #0369a1;
    padding: 6px 14px;
    border-radius: 20px;
    font-size: 13px;
    font-weight: 600;
    text-transform: capitalize;
  }

  .star-rating {
    display: flex;
    gap: 2px;
  }

  .star {
    font-size: 18px;
    color: #ddd;
  }

  .star.filled {
    color: #fbbf24;
  }

  .hotel-header h1 {
    font-size: 32px;
    font-weight: 700;
    color: #111;
    margin-bottom: 12px;
    line-height: 1.2;
  }

  .location-info {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #666;
    font-size: 15px;
    margin-bottom: 20px;
  }

  .rating-badge {
    display: inline-flex;
    align-items: center;
    gap: 16px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 16px 24px;
    border-radius: 12px;
  }

  .rating-score {
    font-size: 36px;
    font-weight: 700;
    line-height: 1;
  }

  .rating-details {
    display: flex;
    flex-direction: column;
    gap: 2px;
  }

  .rating-details strong {
    font-size: 16px;
  }

  .rating-details span {
    font-size: 13px;
    opacity: 0.9;
  }

  .reviewer-country {
    color: #666;
    font-size: 13px;
  }

  /* Sections */
  .main-content section {
    background: white;
    padding: 32px;
    border-radius: 16px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    margin-bottom: 24px;
  }

  .main-content h2 {
    font-size: 24px;
    font-weight: 700;
    color: #111;
    margin-bottom: 20px;
  }

  .description-content {
    font-size: 16px;
    line-height: 1.8;
    color: #444;
  }

  .description-content :global(p) {
    margin-bottom: 16px;
  }

  /* Amenities Grid */
  .amenities-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 16px;
  }

  .amenity-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    background: #f8f9fa;
    border-radius: 8px;
    font-size: 15px;
    color: #333;
  }

  .amenity-item svg {
    color: #10b981;
    flex-shrink: 0;
  }

  /* Rooms Grid */
  .rooms-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 16px;
  }

  .room-card {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 16px;
    background: #f0f9ff;
    border: 2px solid #e0f2fe;
    border-radius: 12px;
    font-weight: 500;
    color: #0369a1;
  }

  .room-card svg {
    flex-shrink: 0;
  }

  /* Detailed Ratings */
  .ratings-grid {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .rating-bar {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .rating-bar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 15px;
  }

  .rating-bar-header span {
    color: #666;
  }

  .rating-bar-header strong {
    color: #111;
    font-size: 16px;
  }

  .bar-track {
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
    overflow: hidden;
  }

  .bar-fill {
    height: 100%;
    background: linear-gradient(90deg, #10b981 0%, #059669 100%);
    border-radius: 4px;
    transition: width 0.5s ease;
  }

  /* Reviews */
  .reviews-grid {
    display: grid;
    gap: 20px;
  }

  .review-card {
    padding: 20px;
    background: #f8f9fa;
    border-radius: 12px;
    border-left: 4px solid #667eea;
  }

  .review-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 12px;
  }

  .reviewer-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
    font-weight: 700;
  }

  .review-header strong {
    display: block;
    font-size: 15px;
    color: #111;
  }

  .review-text {
    font-size: 15px;
    line-height: 1.6;
    color: #555;
    font-style: italic;
  }

  /* Sidebar */
  .sidebar {
    position: sticky;
    top: 24px;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .booking-card {
    background: white;
    padding: 28px;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    border: 2px solid #e5e7eb;
  }

  .price-section {
    text-align: center;
    padding-bottom: 24px;
    border-bottom: 2px solid #f3f4f6;
    margin-bottom: 24px;
  }

  .price-label {
    display: block;
    font-size: 13px;
    color: #666;
    margin-bottom: 8px;
  }

  .price-amount {
    font-size: 40px;
    font-weight: 700;
    color: #111;
    line-height: 1;
    margin-bottom: 4px;
  }

  .price-note {
    font-size: 14px;
    color: #888;
  }

  .book-now-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    width: 100%;
    padding: 16px;
    background: linear-gradient(135deg, #d32f2f 0%, #c41825 100%);
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 16px;
    font-weight: 700;
    cursor: pointer;
    text-decoration: none;
    transition: all 0.2s;
    margin-bottom: 16px;
  }

  .book-now-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(211, 47, 47, 0.3);
  }

  .best-for-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    padding: 12px;
    background: #fef3c7;
    color: #92400e;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 20px;
  }

  .best-for-badge svg {
    color: #f59e0b;
  }

  .booking-features {
    display: flex;
    flex-direction: column;
    gap: 12px;
    padding: 20px 0;
    border-top: 1px solid #f3f4f6;
    border-bottom: 1px solid #f3f4f6;
    margin-bottom: 20px;
  }

  .feature {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 14px;
    color: #333;
  }

  .feature svg {
    color: #10b981;
    flex-shrink: 0;
  }

  .payment-methods {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .payment-label {
    font-size: 13px;
    color: #666;
    font-weight: 600;
  }

  .payment-icons {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .payment-icon {
    padding: 6px 12px;
    background: #f8f9fa;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    font-size: 12px;
    font-weight: 600;
    color: #555;
  }

  /* Info Cards */
  .info-card {
    background: white;
    padding: 24px;
    border-radius: 16px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
  }

  .info-card h3 {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 18px;
    font-weight: 700;
    color: #111;
    margin-bottom: 16px;
  }

  .info-card h3 svg {
    color: #667eea;
  }

  .info-card ul {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .info-card li {
    font-size: 14px;
    color: #555;
    padding-left: 20px;
    position: relative;
  }

  .info-card li::before {
    content: 'â†’';
    position: absolute;
    left: 0;
    color: #667eea;
    font-weight: 700;
  }

  /* Lightbox */
  .lightbox {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.95);
    z-index: 9999;
    display: none;
    align-items: center;
    justify-content: center;
  }

  .lightbox.active {
    display: flex;
  }

  .lightbox-image {
    max-width: 90vw;
    max-height: 90vh;
    object-fit: contain;
  }

  .lightbox-close,
  .lightbox-prev,
  .lightbox-next {
    position: absolute;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 2px solid rgba(255, 255, 255, 0.2);
    color: white;
    padding: 12px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s;
  }

  .lightbox-close:hover,
  .lightbox-prev:hover,
  .lightbox-next:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.1);
  }

  .lightbox-close {
    top: 24px;
    right: 24px;
  }

  .lightbox-prev {
    left: 24px;
  }

  .lightbox-next {
    right: 24px;
  }

  .lightbox-counter {
    position: absolute;
    bottom: 24px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(10px);
    color: white;
    padding: 12px 24px;
    border-radius: 24px;
    font-size: 16px;
    font-weight: 600;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .content-grid {
      grid-template-columns: 1fr;
    }

    .sidebar {
      position: static;
      order: -1;
    }
  }

  @media (max-width: 768px) {
    .gallery-grid {
      grid-template-columns: 1fr;
      height: auto;
    }

    .main-image {
      height: 350px;
    }

    .side-images {
      display: none;
    }

    .content-container {
      padding: 24px 16px;
    }

    .hotel-header {
      padding: 24px;
    }

    .hotel-header h1 {
      font-size: 24px;
    }

    .main-content section {
      padding: 24px;
    }

    .amenities-grid,
    .rooms-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script define:vars={{ allImages, title }}>
  // Lightbox functionality
  const lightbox = document.getElementById('lightbox');
  const lightboxImage = lightbox?.querySelector('.lightbox-image');
  const currentIndexEl = lightbox?.querySelector('.current-index');
  const closeBtn = lightbox?.querySelector('.lightbox-close');
  const prevBtn = lightbox?.querySelector('.lightbox-prev');
  const nextBtn = lightbox?.querySelector('.lightbox-next');
  const viewAllBtn = document.getElementById('viewAllPhotos');
  const imageButtons = document.querySelectorAll('[data-image-index]');

  let currentIndex = 0;

  function openLightbox(index) {
    currentIndex = index;
    showImage(currentIndex);
    lightbox.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function closeLightbox() {
    lightbox.classList.remove('active');
    document.body.style.overflow = '';
  }

  function showImage(index) {
    if (!lightboxImage || !currentIndexEl) return;
    currentIndex = index;
    lightboxImage.src = allImages[index];
    lightboxImage.alt = `${title} - Image ${index + 1}`;
    currentIndexEl.textContent = (index + 1).toString();
  }

  function nextImage() {
    showImage((currentIndex + 1) % allImages.length);
  }

  function prevImage() {
    showImage((currentIndex - 1 + allImages.length) % allImages.length);
  }

  // Event listeners
  imageButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      const index = parseInt(btn.getAttribute('data-image-index') || '0');
      openLightbox(index);
    });
  });

  viewAllBtn?.addEventListener('click', () => openLightbox(0));
  closeBtn?.addEventListener('click', closeLightbox);
  prevBtn?.addEventListener('click', prevImage);
  nextBtn?.addEventListener('click', nextImage);

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (lightbox?.classList.contains('active')) {
      if (e.key === 'Escape') closeLightbox();
      if (e.key === 'ArrowLeft') prevImage();
      if (e.key === 'ArrowRight') nextImage();
    }
  });

  // Close on background click
  lightbox?.addEventListener('click', (e) => {
    if (e.target === lightbox) closeLightbox();
  });
</script>
