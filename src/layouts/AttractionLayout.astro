---
import BaseLayout from './BaseLayout.astro';
import type { CollectionEntry } from 'astro:content';

interface Props {
  attraction: CollectionEntry<'attractions'>;
}

const { attraction } = Astro.props;
const { Content } = await attraction.render();

// Destructure frontmatter data with fallbacks
const {
  title,
  description,
  type,
  location,
  featuredImage,
  images = [],
} = attraction.data;

// Use frontmatter slug or fall back to file system slug
const slug = attraction.data.slug || attraction.slug;

// Canonical URL
const canonicalURL = `https://albaniavisit.com/attractions/${slug}/`;

// Featured image for meta tags
const ogImage = featuredImage || images[0] || '/images/albaniavisit-og-default.jpg';

// All images for gallery
const allImages = featuredImage ? [featuredImage, ...images] : images;
---

<BaseLayout
  title={`${title} | Visit Albania`}
  description={description}
  canonical={canonicalURL}
  image={ogImage}
>
  <article class="attraction-page">
    <!-- Hero Section -->
    <section class="hero-section">
      {featuredImage ? (
        <div class="hero-image">
          <img
            src={featuredImage}
            alt={title}
            loading="eager"
          />
          <div class="hero-overlay">
            <div class="hero-content">
              <div class="breadcrumbs">
                <a href="/">Home</a>
                <span>/</span>
                <a href="/attractions/">Attractions</a>
                {type && (
                  <>
                    <span>/</span>
                    <span>{type}</span>
                  </>
                )}
              </div>
              <h1>{title}</h1>
              <div class="meta-tags">
                {type && <span class="type-tag">{type}</span>}
                {location && (
                  <span class="location-tag">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                      <circle cx="12" cy="10" r="3"></circle>
                    </svg>
                    {location}
                  </span>
                )}
              </div>
              <p class="lead-description">{description}</p>
            </div>
          </div>
        </div>
      ) : (
        <div class="hero-text-only">
          <div class="container">
            <div class="breadcrumbs">
              <a href="/">Home</a>
              <span>/</span>
              <a href="/attractions/">Attractions</a>
              {type && (
                <>
                  <span>/</span>
                  <span>{type}</span>
                </>
              )}
            </div>
            <h1>{title}</h1>
            <div class="meta-tags">
              {type && <span class="type-tag">{type}</span>}
              {location && (
                <span class="location-tag">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                    <circle cx="12" cy="10" r="3"></circle>
                  </svg>
                  {location}
                </span>
              )}
            </div>
            <p class="lead-description">{description}</p>
          </div>
        </div>
      )}
    </section>

    <div class="content-wrapper">
      <div class="container">
        <div class="content-grid">
          <!-- Main Content -->
          <div class="main-content">
            <div class="prose" data-article-content>
              <Content />
            </div>

            <!-- Image Gallery -->
            {allImages.length > 0 && (
              <section class="gallery-section">
                <h2>Photo Gallery</h2>
                <div class="gallery-grid">
                  {allImages.slice(0, 12).map((image, index) => (
                    <button class="gallery-item" data-image-index={index}>
                      <img
                        src={image}
                        alt={`${title} - Photo ${index + 1}`}
                        loading="lazy"
                      />
                    </button>
                  ))}
                </div>
                {allImages.length > 12 && (
                  <p class="gallery-note">Showing first 12 of {allImages.length} photos</p>
                )}
              </section>
            )}
          </div>

          <!-- Sidebar -->
          <aside class="sidebar">
            <!-- Quick Info Card -->
            <div class="info-card">
              <h3>Quick Info</h3>
              <dl class="info-list">
                {type && (
                  <>
                    <dt>
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                      </svg>
                      Type
                    </dt>
                    <dd>{type}</dd>
                  </>
                )}
                {location && (
                  <>
                    <dt>
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                        <circle cx="12" cy="10" r="3"></circle>
                      </svg>
                      Location
                    </dt>
                    <dd>{location}</dd>
                  </>
                )}
              </dl>
            </div>

            <!-- Explore More -->
            <div class="info-card">
              <h3>Explore More</h3>
              <div class="explore-links">
                <a href="/attractions/" class="explore-link">
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                  </svg>
                  <span>All Attractions</span>
                </a>
                <a href="/destinations/" class="explore-link">
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                    <circle cx="12" cy="10" r="3"></circle>
                  </svg>
                  <span>Destinations</span>
                </a>
                <a href="/activities/" class="explore-link">
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M12 2L2 7l10 5 10-5-10-5z"></path>
                    <path d="M2 17l10 5 10-5"></path>
                    <path d="M2 12l10 5 10-5"></path>
                  </svg>
                  <span>Activities</span>
                </a>
                <a href="/accommodation/" class="explore-link">
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                  </svg>
                  <span>Find Accommodation</span>
                </a>
              </div>
            </div>

            <!-- Visitor Tips -->
            <div class="info-card tips-card">
              <h3>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"></circle>
                  <path d="M12 16v-4"></path>
                  <path d="M12 8h.01"></path>
                </svg>
                Visitor Tips
              </h3>
              <ul class="tips-list">
                <li>Check opening hours before visiting</li>
                <li>Bring water and sun protection</li>
                <li>Respect the site and local customs</li>
                <li>Photography may be restricted in some areas</li>
              </ul>
            </div>
          </aside>
        </div>
      </div>
    </div>

    <!-- Lightbox for Gallery -->
    {allImages.length > 0 && (
      <div class="lightbox" id="lightbox">
        <button class="lightbox-close">
          <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
        <button class="lightbox-prev">
          <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </button>
        <img class="lightbox-image" src="" alt="" />
        <button class="lightbox-next">
          <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </button>
        <div class="lightbox-counter">
          <span class="current-index">1</span> / <span class="total-images">{allImages.length}</span>
        </div>
      </div>
    )}
  </article>
</BaseLayout>

<script is:inline>
  // ========================================
  // Article Read More Functionality
  // ========================================
  document.addEventListener('DOMContentLoaded', function() {
    const articleContent = document.querySelector('[data-article-content]');

    if (!articleContent) return;

    // Get all direct children
    const elements = Array.from(articleContent.children);

    // Count all paragraphs and H2s to find a good insertion point
    let paragraphCount = 0;
    let h2Count = 0;
    let insertIndex = -1;

    for (let i = 0; i < elements.length; i++) {
      if (elements[i].tagName === 'H2') {
        h2Count++;
      }
      if (elements[i].tagName === 'P') {
        paragraphCount++;
        // Insert after 3 paragraphs OR after 2nd H2 section starts (whichever comes first)
        if (paragraphCount >= 3 || (h2Count >= 2 && paragraphCount >= 2)) {
          insertIndex = i;
          break;
        }
      }
    }

    // Only show button if there's substantial content after the insertion point
    if (insertIndex !== -1 && insertIndex < elements.length - 3) {
      // Create Read More button FIRST
      const readMoreBtn = document.createElement('button');
      readMoreBtn.className = 'read-more-btn';
      readMoreBtn.innerHTML = `
        <span>Continue Reading Full Story</span>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M19 9l-7 7-7-7"></path>
        </svg>
      `;

      // Insert button after the paragraph
      elements[insertIndex].insertAdjacentElement('afterend', readMoreBtn);

      // NOW hide everything after the insertion point
      // We need to re-query to account for the button we just added
      const allChildren = Array.from(articleContent.children);
      const buttonIndex = allChildren.indexOf(readMoreBtn);

      for (let i = buttonIndex + 1; i < allChildren.length; i++) {
        allChildren[i].style.display = 'none';
        allChildren[i].setAttribute('data-hidden-by-readmore', 'true');
      }

      // Handle click
      readMoreBtn.addEventListener('click', () => {
        // Show all hidden content
        const hiddenElements = articleContent.querySelectorAll('[data-hidden-by-readmore="true"]');
        hiddenElements.forEach(el => {
          el.style.display = '';
          el.removeAttribute('data-hidden-by-readmore');
          el.classList.add('revealed-content');
        });
        // Remove the button
        readMoreBtn.remove();
      });
    }
  });
</script>

<script is:inline define:vars={{ allImages, title }}>
  // Lightbox functionality
  const lightbox = document.getElementById('lightbox');
  const lightboxImage = lightbox?.querySelector('.lightbox-image');
  const currentIndexEl = lightbox?.querySelector('.current-index');
  const closeBtn = lightbox?.querySelector('.lightbox-close');
  const prevBtn = lightbox?.querySelector('.lightbox-prev');
  const nextBtn = lightbox?.querySelector('.lightbox-next');
  const imageButtons = document.querySelectorAll('[data-image-index]');

  let currentIndex = 0;

  function openLightbox(index) {
    currentIndex = index;
    showImage(currentIndex);
    lightbox.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function closeLightbox() {
    lightbox?.classList.remove('active');
    document.body.style.overflow = '';
  }

  function showImage(index) {
    if (!lightboxImage || !currentIndexEl) return;
    currentIndex = index;
    lightboxImage.src = allImages[index];
    lightboxImage.alt = `${title} - Image ${index + 1}`;
    currentIndexEl.textContent = (index + 1).toString();
  }

  function nextImage() {
    currentIndex = (currentIndex + 1) % allImages.length;
    showImage(currentIndex);
  }

  function prevImage() {
    currentIndex = (currentIndex - 1 + allImages.length) % allImages.length;
    showImage(currentIndex);
  }

  // Event listeners
  imageButtons.forEach((btn) => {
    btn.addEventListener('click', () => {
      const index = parseInt(btn.getAttribute('data-image-index') || '0');
      openLightbox(index);
    });
  });

  closeBtn?.addEventListener('click', closeLightbox);
  nextBtn?.addEventListener('click', nextImage);
  prevBtn?.addEventListener('click', prevImage);

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (!lightbox?.classList.contains('active')) return;

    if (e.key === 'Escape') closeLightbox();
    if (e.key === 'ArrowRight') nextImage();
    if (e.key === 'ArrowLeft') prevImage();
  });

  // Click outside to close
  lightbox?.addEventListener('click', (e) => {
    if (e.target === lightbox) closeLightbox();
  });
</script>

<style>
  /* Hero Section */
  .hero-section {
    margin-top: -2rem;
  }

  .hero-image {
    position: relative;
    height: 500px;
    overflow: hidden;
  }

  .hero-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .hero-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(to bottom, rgba(0,0,0,0.3), rgba(0,0,0,0.6));
    display: flex;
    align-items: flex-end;
    padding: 3rem 2rem;
  }

  .hero-content {
    max-width: 1200px;
    margin: 0 auto;
    width: 100%;
    color: white;
  }

  .hero-text-only {
    background: linear-gradient(135deg, #16a085 0%, #138d75 100%);
    color: white;
    padding: 4rem 2rem;
  }

  .hero-text-only .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .breadcrumbs {
    display: flex;
    gap: 0.5rem;
    font-size: 0.875rem;
    margin-bottom: 1rem;
    opacity: 0.9;
  }

  .breadcrumbs a {
    color: inherit;
    text-decoration: none;
  }

  .breadcrumbs a:hover {
    text-decoration: underline;
  }

  .hero-content h1,
  .hero-text-only h1 {
    font-size: 3rem;
    font-weight: 700;
    margin: 0 0 0.75rem 0;
    line-height: 1.2;
  }

  .meta-tags {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
  }

  .type-tag,
  .location-tag {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.875rem;
    padding: 0.25rem 0.75rem;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 20px;
    font-weight: 500;
  }

  .lead-description {
    font-size: 1.25rem;
    max-width: 700px;
    line-height: 1.6;
    margin: 0;
  }

  /* Content Grid */
  .content-wrapper {
    padding: 3rem 2rem;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .content-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 3rem;
  }

  @media (min-width: 1024px) {
    .content-grid {
      grid-template-columns: 1fr 350px;
    }
  }

  /* Prose Styles */
  .prose {
    font-size: 1.125rem;
    line-height: 1.75;
    color: #2c3e50;
  }

  .prose h2 {
    font-size: 2rem;
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    color: #2c3e50;
  }

  .prose h3 {
    font-size: 1.5rem;
    margin-top: 2rem;
    margin-bottom: 0.75rem;
    color: #34495e;
  }

  .prose p {
    margin-bottom: 1.25rem;
  }

  .prose img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 2rem 0;
  }

  .prose a {
    color: #16a085;
    text-decoration: none;
  }

  .prose a:hover {
    text-decoration: underline;
  }

  .prose ul,
  .prose ol {
    margin: 1.5rem 0;
    padding-left: 2rem;
  }

  .prose li {
    margin-bottom: 0.5rem;
  }

  /* Hidden Content for Read More */
  .prose .hidden-content {
    display: none;
  }

  .prose .revealed-content {
    animation: fadeIn 0.4s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Read More Button */
  .read-more-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    width: 100%;
    margin: 2rem 0;
    padding: 1rem 2rem;
    background: linear-gradient(135deg, #16a085 0%, #138d75 100%);
    color: white;
    border: none;
    font-size: 1.0625rem;
    font-weight: 600;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(22, 160, 133, 0.3);
  }

  .read-more-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(22, 160, 133, 0.4);
  }

  .read-more-btn:active {
    transform: translateY(0);
  }

  .read-more-btn span {
    letter-spacing: 0.3px;
    order: 1;
  }

  .read-more-btn svg {
    flex-shrink: 0;
    order: 2;
    margin-left: 0.25rem;
    animation: bounce 2s infinite;
  }

  @keyframes bounce {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(4px);
    }
  }

  /* Gallery Section */
  .gallery-section {
    margin-top: 3rem;
    padding-top: 3rem;
    border-top: 1px solid #dee2e6;
  }

  .gallery-section h2 {
    font-size: 1.75rem;
    margin-bottom: 1.5rem;
    color: #2c3e50;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
  }

  .gallery-item {
    position: relative;
    aspect-ratio: 4 / 3;
    overflow: hidden;
    border-radius: 8px;
    border: none;
    padding: 0;
    cursor: pointer;
    background: #f8f9fa;
    transition: transform 0.2s;
  }

  .gallery-item:hover {
    transform: scale(1.02);
  }

  .gallery-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .gallery-note {
    text-align: center;
    color: #6c757d;
    margin-top: 1rem;
    font-size: 0.875rem;
  }

  /* Sidebar */
  .sidebar {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .info-card {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 1.5rem;
  }

  .info-card h3 {
    font-size: 1.25rem;
    margin: 0 0 1rem 0;
    color: #2c3e50;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .info-list {
    margin: 0;
  }

  .info-list dt {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 0.25rem;
  }

  .info-list dt svg {
    color: #16a085;
  }

  .info-list dd {
    margin: 0 0 1rem 1.75rem;
    color: #6c757d;
  }

  .info-list dd:last-child {
    margin-bottom: 0;
  }

  /* Explore Links */
  .explore-links {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .explore-link {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    border-radius: 4px;
    background: #f8f9fa;
    color: #2c3e50;
    text-decoration: none;
    transition: background-color 0.2s;
  }

  .explore-link:hover {
    background: #e9ecef;
  }

  .explore-link svg {
    color: #16a085;
    flex-shrink: 0;
  }

  /* Tips Card */
  .tips-card {
    background: linear-gradient(135deg, #e8f8f5 0%, #d5f4e6 100%);
    border-color: #16a085;
  }

  .tips-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .tips-list li {
    padding-left: 1.5rem;
    margin-bottom: 0.75rem;
    position: relative;
  }

  .tips-list li:last-child {
    margin-bottom: 0;
  }

  .tips-list li::before {
    content: "→";
    position: absolute;
    left: 0;
    color: #16a085;
    font-weight: bold;
  }

  /* Lightbox */
  .lightbox {
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.95);
    z-index: 9999;
    align-items: center;
    justify-content: center;
  }

  .lightbox.active {
    display: flex;
  }

  .lightbox-image {
    max-width: 90%;
    max-height: 90%;
    object-fit: contain;
  }

  .lightbox-close,
  .lightbox-prev,
  .lightbox-next {
    position: absolute;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    cursor: pointer;
    padding: 1rem;
    border-radius: 4px;
    transition: background-color 0.2s;
  }

  .lightbox-close:hover,
  .lightbox-prev:hover,
  .lightbox-next:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .lightbox-close {
    top: 1rem;
    right: 1rem;
  }

  .lightbox-prev {
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
  }

  .lightbox-next {
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
  }

  .lightbox-counter {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    background: rgba(0, 0, 0, 0.7);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-size: 0.875rem;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .hero-content h1,
    .hero-text-only h1 {
      font-size: 2rem;
    }

    .lead-description {
      font-size: 1rem;
    }

    .prose {
      font-size: 1rem;
    }

    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
  }
</style>
