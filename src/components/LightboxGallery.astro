---
interface Props {
  images: string[];
  title: string;
}

const { images, title } = Astro.props;
const galleryId = `gallery-${Math.random().toString(36).substring(2, 11)}`;
const initialImageCount = 8; // Show 2 rows of 4 images initially
const hasMoreImages = images.length > initialImageCount;
---

<div class="lightbox-gallery" data-gallery-id={galleryId} data-initial-count={initialImageCount}>
  <div class="gallery-grid">
    {images.map((image: string, index: number) => (
      <button
        class="gallery-item"
        data-index={index}
        data-hidden={index >= initialImageCount ? "true" : "false"}
        style={index >= initialImageCount ? "display: none;" : ""}
        aria-label={`View image ${index + 1} of ${images.length}`}
      >
        <img
          src={image}
          alt={`${title} - Image ${index + 1}`}
          loading="lazy"
        />
        <div class="gallery-overlay">
          <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.35-4.35"></path>
            <line x1="11" y1="8" x2="11" y2="14"></line>
            <line x1="8" y1="11" x2="14" y2="11"></line>
          </svg>
        </div>
      </button>
    ))}
  </div>

  {hasMoreImages && (
    <div class="load-more-container">
      <button class="load-more-btn" aria-label="Load more images">
        <span class="load-more-text">Load More Images</span>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="6 9 12 15 18 9"></polyline>
        </svg>
      </button>
      <span class="images-count">{images.length - initialImageCount} more images</span>
    </div>
  )}

  <!-- Lightbox Modal -->
  <div class="lightbox-modal" id="lightbox" aria-hidden="true" role="dialog" aria-modal="true">
    <button class="lightbox-close" aria-label="Close gallery">
      <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>

    <button class="lightbox-prev" aria-label="Previous image">
      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="15 18 9 12 15 6"></polyline>
      </svg>
    </button>

    <button class="lightbox-next" aria-label="Next image">
      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="9 18 15 12 9 6"></polyline>
      </svg>
    </button>

    <div class="lightbox-content">
      <img class="lightbox-image" src="" alt="" />
    </div>

    <div class="lightbox-counter" aria-live="polite"></div>
  </div>
</div>

<script>
  // Initialize all galleries on the page
  function initGallery(galleryElement: Element) {
    const galleryItems = galleryElement.querySelectorAll('.gallery-item');
    const lightbox = galleryElement.querySelector('.lightbox-modal') as HTMLElement;
    const lightboxImage = lightbox.querySelector('.lightbox-image') as HTMLImageElement;
    const lightboxCounter = lightbox.querySelector('.lightbox-counter') as HTMLElement;
    const closeBtn = lightbox.querySelector('.lightbox-close') as HTMLButtonElement;
    const prevBtn = lightbox.querySelector('.lightbox-prev') as HTMLButtonElement;
    const nextBtn = lightbox.querySelector('.lightbox-next') as HTMLButtonElement;

    // Collect all image sources
    const images = Array.from(galleryItems).map((item: Element) => {
      const img = item.querySelector('img');
      return img ? img.src : '';
    }).filter((src: string) => src);

    let currentIndex = 0;
    let touchStartX = 0;
    let touchEndX = 0;

    function openLightbox(index: number) {
      currentIndex = index;
      updateLightbox();
      lightbox.classList.add('active');
      lightbox.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
    }

    function closeLightbox() {
      lightbox.classList.remove('active');
      lightbox.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
    }

    function updateLightbox() {
      if (images[currentIndex]) {
        lightboxImage.src = images[currentIndex];
        lightboxImage.alt = `Image ${currentIndex + 1}`;
        lightboxCounter.textContent = `${currentIndex + 1} / ${images.length}`;

        // Update prev/next button states
        prevBtn.disabled = currentIndex === 0;
        nextBtn.disabled = currentIndex === images.length - 1;
      }
    }

    function showPrev() {
      if (currentIndex > 0) {
        currentIndex--;
        updateLightbox();
      }
    }

    function showNext() {
      if (currentIndex < images.length - 1) {
        currentIndex++;
        updateLightbox();
      }
    }

    // Gallery item clicks
    galleryItems.forEach((item: Element, index: number) => {
      item.addEventListener('click', () => openLightbox(index));
    });

    // Close button
    closeBtn.addEventListener('click', closeLightbox);

    // Navigation buttons
    prevBtn.addEventListener('click', showPrev);
    nextBtn.addEventListener('click', showNext);

    // Click outside to close
    lightbox.addEventListener('click', (e: MouseEvent) => {
      if (e.target === lightbox) {
        closeLightbox();
      }
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e: KeyboardEvent) => {
      if (!lightbox.classList.contains('active')) return;

      switch(e.key) {
        case 'Escape':
          closeLightbox();
          break;
        case 'ArrowLeft':
          showPrev();
          break;
        case 'ArrowRight':
          showNext();
          break;
      }
    });

    // Touch/swipe gestures
    lightbox.addEventListener('touchstart', (e: TouchEvent) => {
      touchStartX = e.changedTouches[0].screenX;
    }, { passive: true });

    lightbox.addEventListener('touchend', (e: TouchEvent) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }, { passive: true });

    function handleSwipe() {
      const swipeThreshold = 50;
      const diff = touchStartX - touchEndX;

      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          showNext();
        } else {
          showPrev();
        }
      }
    }

    // Preload adjacent images for smooth navigation
    function preloadImage(index: number) {
      if (index >= 0 && index < images.length) {
        const img = new Image();
        img.src = images[index];
      }
    }

    // Preload next and previous images when lightbox opens
    lightbox.addEventListener('transitionend', () => {
      if (lightbox.classList.contains('active')) {
        preloadImage(currentIndex - 1);
        preloadImage(currentIndex + 1);
      }
    });
  }

  // Handle "Load More" button
  function initLoadMore(galleryElement: Element) {
    const loadMoreBtn = galleryElement.querySelector('.load-more-btn');
    const loadMoreContainer = galleryElement.querySelector('.load-more-container') as HTMLElement;
    const hiddenItems = galleryElement.querySelectorAll('.gallery-item[data-hidden="true"]');

    if (loadMoreBtn && loadMoreContainer) {
      loadMoreBtn.addEventListener('click', () => {
        // Show all hidden items
        hiddenItems.forEach((item: Element) => {
          const htmlItem = item as HTMLElement;
          htmlItem.style.display = '';
          htmlItem.setAttribute('data-hidden', 'false');
        });

        // Hide the load more button
        loadMoreContainer.style.display = 'none';

        // Re-initialize gallery to include newly visible images
        initGallery(galleryElement);
      });
    }
  }

  // Initialize all galleries when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const galleries = document.querySelectorAll('.lightbox-gallery');
    galleries.forEach((gallery: Element) => {
      initGallery(gallery);
      initLoadMore(gallery);
    });
  });
</script>

<style>
  /* Gallery Grid */
  .lightbox-gallery {
    margin: 2rem 0;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
  }

  @media (max-width: 768px) {
    .gallery-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.5rem;
    }
  }

  .gallery-item {
    position: relative;
    aspect-ratio: 4 / 3;
    overflow: hidden;
    border-radius: 8px;
    cursor: pointer;
    border: none;
    padding: 0;
    background: #f0f0f0;
    transition: transform 0.2s ease;
  }

  .gallery-item:hover {
    transform: scale(1.02);
  }

  .gallery-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .gallery-overlay {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    opacity: 0;
    transition: all 0.2s ease;
  }

  .gallery-item:hover .gallery-overlay {
    background: rgba(0, 0, 0, 0.5);
    opacity: 1;
  }

  /* Load More Button */
  .load-more-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 12px;
    margin-top: 32px;
    padding-top: 24px;
    border-top: 1px solid #e5e7eb;
  }

  .load-more-btn {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 14px 32px;
    background: linear-gradient(135deg, #003B95 0%, #0052CC 100%);
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 15px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 59, 149, 0.2);
  }

  .load-more-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0, 59, 149, 0.3);
  }

  .load-more-btn:active {
    transform: translateY(0);
  }

  .load-more-btn svg {
    flex-shrink: 0;
    transition: transform 0.3s ease;
  }

  .load-more-btn:hover svg {
    transform: translateY(2px);
  }

  .images-count {
    font-size: 14px;
    color: #666;
    font-weight: 500;
  }

  /* Lightbox Modal */
  .lightbox-modal {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.95);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .lightbox-modal.active {
    opacity: 1;
    visibility: visible;
  }

  .lightbox-content {
    max-width: 90vw;
    max-height: 85vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .lightbox-image {
    max-width: 100%;
    max-height: 85vh;
    object-fit: contain;
    user-select: none;
    animation: fadeIn 0.3s ease;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Controls */
  .lightbox-close,
  .lightbox-prev,
  .lightbox-next {
    position: absolute;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    cursor: pointer;
    padding: 0.75rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s ease;
    backdrop-filter: blur(10px);
  }

  .lightbox-close:hover,
  .lightbox-prev:hover:not(:disabled),
  .lightbox-next:hover:not(:disabled) {
    background: rgba(255, 255, 255, 0.2);
  }

  .lightbox-close {
    top: 1.5rem;
    right: 1.5rem;
  }

  .lightbox-prev {
    left: 1.5rem;
    top: 50%;
    transform: translateY(-50%);
  }

  .lightbox-next {
    right: 1.5rem;
    top: 50%;
    transform: translateY(-50%);
  }

  .lightbox-prev:disabled,
  .lightbox-next:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  /* Counter */
  .lightbox-counter {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
    backdrop-filter: blur(10px);
  }

  /* Mobile Optimizations */
  @media (max-width: 768px) {
    .load-more-container {
      margin-top: 24px;
      padding-top: 16px;
    }

    .load-more-btn {
      padding: 12px 24px;
      font-size: 14px;
    }

    .images-count {
      font-size: 13px;
    }

    .lightbox-close {
      top: 1rem;
      right: 1rem;
      padding: 0.5rem;
    }

    .lightbox-prev,
    .lightbox-next {
      width: 48px;
      height: 48px;
      padding: 0.5rem;
    }

    .lightbox-prev {
      left: 0.5rem;
    }

    .lightbox-next {
      right: 0.5rem;
    }

    .lightbox-counter {
      bottom: 1rem;
      font-size: 0.8125rem;
    }

    .lightbox-content {
      max-width: 95vw;
      max-height: 80vh;
    }

    .lightbox-image {
      max-height: 80vh;
    }
  }

  /* Prevent body scroll when lightbox is open */
  body:has(.lightbox-modal.active) {
    overflow: hidden;
  }
</style>
