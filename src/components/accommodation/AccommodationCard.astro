---
interface Props {
  title: string;
  slug: string;
  featuredImage?: string;
  location?: string;
  starRating?: number;
  rating?: number;
  accommodationType?: string;
  amenities: string[];
  description: string;
  language?: string;
}

const {
  title,
  slug,
  featuredImage,
  location,
  starRating,
  rating,
  accommodationType,
  amenities,
  description,
  language = 'en'
} = Astro.props;

// Generate URL based on language
const url = language === 'sq' ? `/sq/accommodation/${slug}` : `/accommodation/${slug}`;

// Truncate description
const truncatedDesc = description.length > 150
  ? description.substring(0, 150) + '...'
  : description;

// Top amenities to display (max 4)
const topAmenities = amenities.slice(0, 4);

// Create data attribute for filtering
const filterData = JSON.stringify({
  starRating: starRating || 3,
  accommodationType: accommodationType || 'hotel',
  location: location || '',
  amenities: amenities
});
---

<article
  class="accommodation-card"
  data-accommodation={filterData}
  style="opacity: 1; transition: opacity 0.3s;"
>
  <a href={url} class="card-link">
    <!-- Image -->
    <div class="card-image">
      {featuredImage ? (
        <img
          src={featuredImage}
          alt={title}
          loading="lazy"
        />
      ) : (
        <div class="no-image">
          <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
            <polyline points="9 22 9 12 15 12 15 22"></polyline>
          </svg>
        </div>
      )}

      {/* Type Badge */}
      {accommodationType && (
        <div class="type-badge">
          {accommodationType.charAt(0).toUpperCase() + accommodationType.slice(1)}
        </div>
      )}
    </div>

    <!-- Content -->
    <div class="card-content">
      <!-- Title & Location -->
      <div class="card-header">
        <h3 class="card-title">{title}</h3>
        {location && (
          <div class="card-location">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
              <circle cx="12" cy="10" r="3"></circle>
            </svg>
            <span>{location}</span>
          </div>
        )}
      </div>

      <!-- Ratings -->
      <div class="card-ratings">
        {starRating && (
          <div class="star-rating">
            {[...Array(5)].map((_, i) => (
              <span class={i < starRating ? 'star filled' : 'star'}>‚≠ê</span>
            ))}
          </div>
        )}
        {rating && (
          <div class="guest-rating">
            <span class="rating-score">{rating.toFixed(1)}</span>
            <span class="rating-label">Guest Rating</span>
          </div>
        )}
      </div>

      <!-- Description -->
      <p class="card-description">{truncatedDesc}</p>

      <!-- Amenities -->
      {topAmenities.length > 0 && (
        <div class="card-amenities">
          {topAmenities.map(amenity => (
            <span class="amenity-tag">{amenity}</span>
          ))}
          {amenities.length > 4 && (
            <span class="amenity-tag more">+{amenities.length - 4} more</span>
          )}
        </div>
      )}

      <!-- CTA -->
      <div class="card-cta">
        <span class="view-details">View Details</span>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M5 12h14M12 5l7 7-7 7"/>
        </svg>
      </div>
    </div>
  </a>
</article>

<style>
  .accommodation-card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .accommodation-card:hover {
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    transform: translateY(-4px);
  }

  .card-link {
    text-decoration: none;
    color: inherit;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .card-image {
    position: relative;
    width: 100%;
    height: 220px;
    overflow: hidden;
    background: #f0f0f0;
  }

  .card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s;
  }

  .accommodation-card:hover .card-image img {
    transform: scale(1.05);
  }

  .no-image {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .type-badge {
    position: absolute;
    top: 12px;
    right: 12px;
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(4px);
    color: white;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: capitalize;
  }

  .card-content {
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    flex: 1;
  }

  .card-header {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .card-title {
    font-size: 18px;
    font-weight: 700;
    color: #1a1a1a;
    margin: 0;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .card-location {
    display: flex;
    align-items: center;
    gap: 4px;
    font-size: 13px;
    color: #666;
  }

  .card-location svg {
    flex-shrink: 0;
  }

  .card-ratings {
    display: flex;
    align-items: center;
    gap: 12px;
    flex-wrap: wrap;
  }

  .star-rating {
    display: flex;
    gap: 2px;
  }

  .star {
    font-size: 14px;
    opacity: 0.3;
  }

  .star.filled {
    opacity: 1;
  }

  .guest-rating {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 4px 10px;
    background: #f0f9ff;
    border-radius: 6px;
  }

  .rating-score {
    font-size: 14px;
    font-weight: 700;
    color: #0369a1;
  }

  .rating-label {
    font-size: 11px;
    color: #64748b;
  }

  .card-description {
    font-size: 14px;
    line-height: 1.6;
    color: #555;
    margin: 0;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .card-amenities {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
  }

  .amenity-tag {
    font-size: 11px;
    padding: 4px 8px;
    background: #f3f4f6;
    color: #374151;
    border-radius: 4px;
    font-weight: 500;
  }

  .amenity-tag.more {
    background: #e31c2a;
    color: white;
  }

  .card-cta {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: auto;
    padding-top: 12px;
    border-top: 1px solid #f0f0f0;
    color: #e31c2a;
    font-weight: 600;
    font-size: 14px;
  }

  .card-cta svg {
    transition: transform 0.2s;
  }

  .accommodation-card:hover .card-cta svg {
    transform: translateX(4px);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .card-image {
      height: 180px;
    }

    .card-content {
      padding: 16px;
      gap: 10px;
    }

    .card-title {
      font-size: 16px;
    }
  }
</style>
