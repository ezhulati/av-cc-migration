---
interface Props {
  images: string[];
  title: string;
  showThumbnails?: boolean;
}

const { images, title, showThumbnails = true } = Astro.props;

// Only render if we have images
if (!images || images.length === 0) {
  return null;
}

const sliderId = `slider-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="image-gallery-wrapper">
  <div class="image-grid" id={sliderId}>
    {images.map((image, index) => (
      <div class={`grid-item ${index >= 6 ? 'hidden' : ''}`} data-image-item>
        <img
          src={image}
          alt={`${title} - Image ${index + 1}`}
          loading={index < 6 ? 'eager' : 'lazy'}
        />
      </div>
    ))}
  </div>

  {images.length > 6 && (
    <button class="load-more-btn" data-load-more>
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="12" y1="8" x2="12" y2="16"></line>
        <line x1="8" y1="12" x2="16" y2="12"></line>
      </svg>
      Load More Photos ({images.length - 6} more)
    </button>
  )}
</div>

<script define:vars={{ sliderId, totalImages: images.length }}>
  (function() {
    const gallery = document.getElementById(sliderId);
    if (!gallery) return;

    const loadMoreBtn = gallery.parentElement.querySelector('[data-load-more]');
    if (!loadMoreBtn) return;

    const hiddenItems = gallery.querySelectorAll('.grid-item.hidden');

    loadMoreBtn.addEventListener('click', () => {
      hiddenItems.forEach(item => {
        item.classList.remove('hidden');
      });
      loadMoreBtn.style.display = 'none';
    });
  })();
</script>

<style>
  .image-gallery-wrapper {
    margin: 2rem 0;
  }

  .image-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.75rem;
  }

  .grid-item {
    aspect-ratio: 1;
    overflow: hidden;
    border-radius: 6px;
    background: #f8f9fa;
    transition: opacity 0.3s ease;
  }

  .grid-item.hidden {
    display: none;
  }

  .grid-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    transition: transform 0.2s ease;
  }

  .grid-item:hover img {
    transform: scale(1.05);
  }

  /* Load More Button */
  .load-more-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    width: 100%;
    margin-top: 1.5rem;
    padding: 0.875rem 1.5rem;
    background: white;
    border: 2px solid #e74c3c;
    color: #e74c3c;
    font-size: 1rem;
    font-weight: 600;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .load-more-btn:hover {
    background: #e74c3c;
    color: white;
  }

  .load-more-btn svg {
    flex-shrink: 0;
  }

  /* Mobile - 2 columns */
  @media (max-width: 768px) {
    .image-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.5rem;
    }

    .load-more-btn {
      font-size: 0.9375rem;
      padding: 0.75rem 1.25rem;
    }
  }

  /* Small mobile - keep 2 columns but smaller gap */
  @media (max-width: 480px) {
    .image-grid {
      gap: 0.375rem;
    }

    .load-more-btn {
      font-size: 0.875rem;
    }
  }
</style>
