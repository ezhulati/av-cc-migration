---
/**
 * Accommodation Listing with Filters
 * Shows all 8,400+ accommodation options with advanced filtering
 */

import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import AccommodationFilters from '../../components/accommodation/AccommodationFilters.astro';
import AccommodationCard from '../../components/accommodation/AccommodationCard.astro';

// Get all accommodations (English language only)
const allAccommodations = await getCollection('accommodation', ({ data }) => {
  // Include all English accommodations
  return data.language === 'en' || !data.language;
});

console.log(`Total accommodations loaded: ${allAccommodations.length}`);

// Sort by star rating (highest first), then by title
const sortedAccommodations = allAccommodations.sort((a, b) => {
  const ratingA = a.data.starRating || 3;
  const ratingB = b.data.starRating || 3;
  if (ratingB !== ratingA) {
    return ratingB - ratingA;
  }
  return a.data.title.localeCompare(b.data.title);
});

// Extract unique values for filters
const starRatings = [...new Set(
  sortedAccommodations
    .map(a => a.data.starRating || 3)
    .filter(Boolean)
)].sort((a, b) => b - a);

const types = [...new Set(
  sortedAccommodations
    .map(a => a.data.accommodationType)
    .filter(Boolean)
)].sort() as string[];

const locations = [...new Set(
  sortedAccommodations
    .map(a => a.data.location)
    .filter(Boolean)
)].sort() as string[];

const pageTitle = 'Accommodation in Albania | Hotels, Apartments & Villas';
const pageDescription = `Discover ${sortedAccommodations.length}+ accommodations across Albania. Find hotels, apartments, villas, and guesthouses with verified ratings and amenities.`;
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <div class="accommodation-page">
    <!-- Header -->
    <header class="page-header">
      <div class="header-content">
        <h1>Accommodation in Albania</h1>
        <p class="subtitle">
          Discover authentic stays across Albania - from luxury hotels in Tirana to beachfront
          villas in Saranda. All properties verified and recommended by locals.
        </p>

        <div class="header-stats">
          <div class="stat">
            <span class="stat-value">{sortedAccommodations.length}+</span>
            <span class="stat-label">Properties</span>
          </div>
          <div class="stat">
            <span class="stat-value">{locations.length}</span>
            <span class="stat-label">Locations</span>
          </div>
          <div class="stat">
            <span class="stat-value">{types.length}</span>
            <span class="stat-label">Property Types</span>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <div class="content-wrapper">
      <div class="container">
        <div class="layout">
          <!-- Filters Sidebar -->
          <AccommodationFilters
            starRatings={starRatings}
            types={types}
            locations={locations}
          />

          <!-- Results -->
          <main class="results-section">
            <div class="results-header">
              <div class="results-info">
                <h2 id="resultsCount">{sortedAccommodations.length} properties found</h2>
                <button class="mobile-filters-btn" id="mobileFiltersBtn">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="4" y1="6" x2="20" y2="6"></line>
                    <line x1="4" y1="12" x2="20" y2="12"></line>
                    <line x1="4" y1="18" x2="20" y2="18"></line>
                  </svg>
                  Filters
                </button>
              </div>

              <div class="sort-controls">
                <label for="sortBy">Sort by:</label>
                <select id="sortBy">
                  <option value="rating-desc">Highest Rated</option>
                  <option value="rating-asc">Lowest Rated</option>
                  <option value="price-asc">Price (Low to High)</option>
                  <option value="price-desc">Price (High to Low)</option>
                  <option value="name-asc">Name (A-Z)</option>
                  <option value="name-desc">Name (Z-A)</option>
                </select>
              </div>
            </div>

            <!-- Accommodation Grid -->
            <div class="accommodations-grid">
              {sortedAccommodations.map((accommodation, index) => (
                <AccommodationCard
                  title={accommodation.data.title}
                  slug={accommodation.slug}
                  featuredImage={accommodation.data.featuredImage}
                  location={accommodation.data.location}
                  starRating={accommodation.data.starRating}
                  rating={accommodation.data.rating}
                  accommodationType={accommodation.data.accommodationType}
                  amenities={accommodation.data.amenities || []}
                  description={accommodation.data.description}
                  language={accommodation.data.language}
                  priceFrom={accommodation.data.priceFrom}
                  index={index}
                  initiallyHidden={index >= 24}
                />
              ))}
            </div>

            <!-- Load More Button -->
            <div class="load-more-section" id="loadMoreSection" style={sortedAccommodations.length <= 24 ? "display: none;" : ""}>
              <button class="load-more-btn" id="loadMoreBtn">
                <span class="load-more-text">Load More Properties</span>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="6 9 12 15 18 9"></polyline>
                </svg>
              </button>
              <div class="load-more-info">
                Showing <span id="showingCount">24</span> of <span id="totalCount">{sortedAccommodations.length}</span> properties
              </div>
            </div>

            <!-- Empty State -->
            <div class="empty-state" id="emptyState" style="display: none;">
              <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.35-4.35"></path>
              </svg>
              <h3>No properties found</h3>
              <p>Try adjusting your filters to see more results</p>
              <button class="clear-all-btn" id="clearAllFilters">Clear All Filters</button>
            </div>
          </main>
        </div>
      </div>
    </div>
  </div>

  <style>
    .accommodation-page {
      min-height: 100vh;
      background: #fafafa;
    }

    /* Header */
    .page-header {
      background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
      color: white;
      padding: 60px 0 80px;
      position: relative;
      overflow: hidden;
    }

    .page-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
      opacity: 0.1;
    }

    .header-content {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 24px;
      position: relative;
      z-index: 1;
    }

    .page-header h1 {
      font-size: 48px;
      font-weight: 800;
      margin: 0 0 16px 0;
      letter-spacing: -0.5px;
    }

    .subtitle {
      font-size: 18px;
      line-height: 1.6;
      color: rgba(255, 255, 255, 0.9);
      max-width: 700px;
      margin: 0 0 32px 0;
    }

    .header-stats {
      display: flex;
      gap: 48px;
      flex-wrap: wrap;
    }

    .stat {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }

    .stat-value {
      font-size: 32px;
      font-weight: 700;
      color: #e31c2a;
    }

    .stat-label {
      font-size: 14px;
      color: rgba(255, 255, 255, 0.7);
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    /* Content */
    .content-wrapper {
      padding: 40px 0 80px;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 24px;
    }

    .layout {
      display: grid;
      grid-template-columns: 300px 1fr;
      gap: 32px;
      align-items: start;
    }

    /* Results Section */
    .results-section {
      min-height: 400px;
    }

    .results-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 32px;
      gap: 16px;
      flex-wrap: wrap;
    }

    .results-info {
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .results-info h2 {
      font-size: 24px;
      font-weight: 700;
      color: #1a1a1a;
      margin: 0;
    }

    .mobile-filters-btn {
      display: none;
      align-items: center;
      gap: 8px;
      padding: 10px 16px;
      background: white;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      color: #333;
      cursor: pointer;
      transition: all 0.2s;
    }

    .mobile-filters-btn:hover {
      border-color: #e31c2a;
      color: #e31c2a;
    }

    .sort-controls {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .sort-controls label {
      font-size: 14px;
      color: #666;
      font-weight: 500;
    }

    .sort-controls select {
      padding: 10px 16px;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      background: white;
      cursor: pointer;
      transition: border-color 0.2s;
    }

    .sort-controls select:focus {
      outline: none;
      border-color: #e31c2a;
    }

    /* Accommodations Grid */
    .accommodations-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      gap: 24px;
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 80px 20px;
      background: white;
      border-radius: 12px;
    }

    .empty-state svg {
      color: #ccc;
      margin-bottom: 24px;
    }

    .empty-state h3 {
      font-size: 24px;
      font-weight: 700;
      color: #1a1a1a;
      margin: 0 0 12px 0;
    }

    .empty-state p {
      font-size: 16px;
      color: #666;
      margin: 0 0 24px 0;
    }

    .clear-all-btn {
      padding: 12px 24px;
      background: #e31c2a;
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s;
    }

    .clear-all-btn:hover {
      background: #c41825;
    }

    /* Load More Section */
    .load-more-section {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 16px;
      margin-top: 48px;
      padding-top: 32px;
      border-top: 2px solid #e5e7eb;
    }

    .load-more-btn {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 16px 40px;
      background: linear-gradient(135deg, #003B95 0%, #0052CC 100%);
      color: white;
      border: none;
      border-radius: 12px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 59, 149, 0.2);
    }

    .load-more-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 16px rgba(0, 59, 149, 0.3);
    }

    .load-more-btn:active {
      transform: translateY(0);
    }

    .load-more-btn svg {
      flex-shrink: 0;
      transition: transform 0.3s ease;
    }

    .load-more-btn:hover svg {
      transform: translateY(3px);
    }

    .load-more-info {
      font-size: 15px;
      color: #666;
      font-weight: 500;
    }

    .load-more-info span {
      font-weight: 700;
      color: #003B95;
    }

    /* Mobile Responsive */
    @media (max-width: 968px) {
      .page-header h1 {
        font-size: 36px;
      }

      .subtitle {
        font-size: 16px;
      }

      .header-stats {
        gap: 32px;
      }

      .stat-value {
        font-size: 28px;
      }

      .layout {
        grid-template-columns: 1fr;
      }

      .mobile-filters-btn {
        display: flex;
      }

      .accommodations-grid {
        grid-template-columns: 1fr;
        gap: 20px;
      }
    }

    @media (max-width: 640px) {
      .page-header {
        padding: 40px 0 60px;
      }

      .page-header h1 {
        font-size: 28px;
      }

      .results-header {
        flex-direction: column;
        align-items: flex-start;
      }

      .results-info h2 {
        font-size: 20px;
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const grid = document.querySelector('.accommodations-grid') as HTMLElement;
      const sortSelect = document.getElementById('sortBy') as HTMLSelectElement;
      const searchInput = document.getElementById('searchInput') as HTMLInputElement;
      const priceRange = document.getElementById('priceRange') as HTMLInputElement;
      const minPriceInput = document.getElementById('minPrice') as HTMLInputElement;
      const maxPriceInput = document.getElementById('maxPrice') as HTMLInputElement;
      const resultsCount = document.getElementById('resultsCount') as HTMLHeadingElement;
      const emptyState = document.getElementById('emptyState') as HTMLElement;
      const locationSearchInput = document.getElementById('locationSearch') as HTMLInputElement;

      if (!grid) return;

      // Load More functionality
      const loadMoreBtn = document.getElementById('loadMoreBtn') as HTMLButtonElement;
      const loadMoreSection = document.getElementById('loadMoreSection') as HTMLElement;
      const showingCountEl = document.getElementById('showingCount') as HTMLElement;
      const totalCountEl = document.getElementById('totalCount') as HTMLElement;

      let currentlyShowing = 24;
      const LOAD_MORE_INCREMENT = 24;

      // Get all cards
      const getAllCards = () => Array.from(grid.children) as HTMLElement[];

      // Update load more button visibility and counts
      const updateLoadMoreButton = () => {
        const allCards = getAllCards();

        // Count cards that are visible (not filtered out) and currently displayed
        const visibleCards = allCards.filter(card =>
          card.style.display !== 'none'
        );

        const totalVisible = allCards.length;
        const currentlyDisplayed = visibleCards.length;

        if (showingCountEl) showingCountEl.textContent = currentlyDisplayed.toString();
        if (totalCountEl) totalCountEl.textContent = totalVisible.toString();

        // Hide load more button if all cards are showing
        if (loadMoreSection) {
          loadMoreSection.style.display = currentlyDisplayed >= totalVisible ? 'none' : 'flex';
        }
      };

      // Load more button handler
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', () => {
          const allCards = getAllCards();
          let loadedCount = 0;

          // Show next batch of hidden cards
          allCards.forEach((card) => {
            if (card.style.display === 'none' && loadedCount < LOAD_MORE_INCREMENT) {
              const isLoadMoreHidden = card.getAttribute('data-load-more-hidden') === 'true';
              if (isLoadMoreHidden) {
                card.style.display = '';
                card.setAttribute('data-load-more-hidden', 'false');
                loadedCount++;
              }
            }
          });

          currentlyShowing += loadedCount;
          updateLoadMoreButton();

          // Smooth scroll to first newly loaded card
          if (loadedCount > 0) {
            const firstNewCard = allCards.find((card) =>
              card.style.display !== 'none' &&
              parseInt(card.getAttribute('data-index') || '0') === currentlyShowing - loadedCount
            );
            if (firstNewCard) {
              setTimeout(() => {
                firstNewCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
              }, 100);
            }
          }
        });
      }

      // Update results count
      const updateResultsCount = () => {
        const visibleCards = getAllCards().filter(card => card.style.display !== 'none');
        const count = visibleCards.length;
        resultsCount.textContent = `${count} ${count === 1 ? 'property' : 'properties'} found`;

        // Show/hide empty state
        if (count === 0) {
          emptyState.style.display = 'block';
          grid.style.display = 'none';
        } else {
          emptyState.style.display = 'none';
          grid.style.display = 'grid';
        }
      };

      // Update item count badges
      const updateItemCounts = () => {
        const visibleCards = getAllCards().filter(card => card.style.display !== 'none');

        // Count by filter type
        const counts: Record<string, Record<string, number>> = {
          starRating: {},
          accommodationType: {},
          location: {},
        };

        visibleCards.forEach(card => {
          try {
            const data = JSON.parse(card.dataset.accommodation || '{}');
            const starRating = data.starRating || 3;
            const type = data.accommodationType || 'hotel';
            const location = data.location || '';

            counts.starRating[starRating] = (counts.starRating[starRating] || 0) + 1;
            counts.accommodationType[type] = (counts.accommodationType[type] || 0) + 1;
            counts.location[location] = (counts.location[location] || 0) + 1;
          } catch (e) {
            console.error('Error parsing card data:', e);
          }
        });

        // Update count badges
        document.querySelectorAll('[data-count-filter]').forEach(badge => {
          const filterType = badge.getAttribute('data-count-filter');
          const filterValue = badge.getAttribute('data-count-value');

          if (filterType && filterValue && counts[filterType]) {
            const count = counts[filterType][filterValue] || 0;
            badge.textContent = count.toString();
          }
        });
      };

      // Get active filters
      const getActiveFilters = () => {
        const filters = {
          search: searchInput?.value.toLowerCase() || '',
          minPrice: parseInt(minPriceInput?.value || '0') || 0,
          maxPrice: parseInt(maxPriceInput?.value || '500') || 500,
          starRatings: Array.from(document.querySelectorAll('input[name="starRating"]:checked'))
            .map(cb => parseInt((cb as HTMLInputElement).value)),
          types: Array.from(document.querySelectorAll('input[name="accommodationType"]:checked'))
            .map(cb => (cb as HTMLInputElement).value),
          locations: Array.from(document.querySelectorAll('input[name="location"]:checked'))
            .map(cb => (cb as HTMLInputElement).value),
          amenities: Array.from(document.querySelectorAll('input[name="amenity"]:checked'))
            .map(cb => (cb as HTMLInputElement).value),
        };
        return filters;
      };

      // Apply all filters
      const applyFilters = () => {
        const filters = getActiveFilters();
        const cards = getAllCards();

        cards.forEach(card => {
          try {
            const data = JSON.parse(card.dataset.accommodation || '{}');
            const title = card.querySelector('.card-title')?.textContent?.toLowerCase() || '';
            const location = data.location?.toLowerCase() || '';
            const starRating = data.starRating || 3;
            const type = data.accommodationType || 'hotel';
            const price = data.priceFrom || 0;
            const amenities = data.amenities || [];

            let visible = true;

            // Search filter
            if (filters.search && !title.includes(filters.search) && !location.includes(filters.search)) {
              visible = false;
            }

            // Price filter
            if (price < filters.minPrice || price > filters.maxPrice) {
              visible = false;
            }

            // Star rating filter
            if (filters.starRatings.length > 0 && !filters.starRatings.includes(starRating)) {
              visible = false;
            }

            // Type filter
            if (filters.types.length > 0 && !filters.types.includes(type)) {
              visible = false;
            }

            // Location filter
            if (filters.locations.length > 0 && !filters.locations.includes(data.location)) {
              visible = false;
            }

            // Amenities filter
            if (filters.amenities.length > 0) {
              const hasAllAmenities = filters.amenities.every(amenity =>
                amenities.some((a: string) => a.toLowerCase().includes(amenity.toLowerCase()))
              );
              if (!hasAllAmenities) {
                visible = false;
              }
            }

            card.style.display = visible ? '' : 'none';
          } catch (e) {
            console.error('Error filtering card:', e);
          }
        });

        updateResultsCount();
        updateItemCounts();
        updateLoadMoreButton();
      };

      // Search functionality
      searchInput?.addEventListener('input', () => {
        applyFilters();
      });

      // Price range functionality
      const updatePriceDisplay = () => {
        const min = parseInt(minPriceInput?.value || '0');
        const max = parseInt(maxPriceInput?.value || '500');

        if (priceRange) {
          priceRange.value = max.toString();
        }
      };

      priceRange?.addEventListener('input', () => {
        if (maxPriceInput) {
          maxPriceInput.value = priceRange.value;
        }
        applyFilters();
      });

      minPriceInput?.addEventListener('input', () => {
        updatePriceDisplay();
        applyFilters();
      });

      maxPriceInput?.addEventListener('input', () => {
        updatePriceDisplay();
        applyFilters();
      });

      // Checkbox filters
      document.querySelectorAll('input[type="checkbox"][data-filter]').forEach(checkbox => {
        checkbox.addEventListener('change', applyFilters);
      });

      // Location search
      locationSearchInput?.addEventListener('input', () => {
        const searchTerm = locationSearchInput.value.toLowerCase();
        const locationCheckboxes = document.querySelectorAll('input[name="location"]');

        locationCheckboxes.forEach(cb => {
          const label = cb.closest('.filter-checkbox');
          const locationName = (cb as HTMLInputElement).value.toLowerCase();

          if (label) {
            if (locationName.includes(searchTerm)) {
              (label as HTMLElement).style.display = '';
            } else {
              (label as HTMLElement).style.display = 'none';
            }
          }
        });
      });

      // Clear all filters
      document.getElementById('clearFilters')?.addEventListener('click', () => {
        // Reset search
        if (searchInput) searchInput.value = '';

        // Reset price range
        if (minPriceInput) minPriceInput.value = '0';
        if (maxPriceInput) maxPriceInput.value = '500';
        if (priceRange) priceRange.value = '500';

        // Uncheck all checkboxes
        document.querySelectorAll('input[type="checkbox"][data-filter]').forEach(cb => {
          (cb as HTMLInputElement).checked = false;
        });

        // Reset location search
        if (locationSearchInput) locationSearchInput.value = '';
        document.querySelectorAll('input[name="location"]').forEach(cb => {
          const label = cb.closest('.filter-checkbox');
          if (label) (label as HTMLElement).style.display = '';
        });

        applyFilters();
      });

      // Clear all from empty state
      document.getElementById('clearAllFilters')?.addEventListener('click', () => {
        document.getElementById('clearFilters')?.click();
      });

      // Sorting functionality
      sortSelect?.addEventListener('change', () => {
        const cards = getAllCards();
        const sortValue = sortSelect.value;

        cards.sort((a, b) => {
          const aData = JSON.parse(a.dataset.accommodation || '{}');
          const bData = JSON.parse(b.dataset.accommodation || '{}');
          const aTitle = a.querySelector('.card-title')?.textContent || '';
          const bTitle = b.querySelector('.card-title')?.textContent || '';

          switch (sortValue) {
            case 'rating-desc':
              return (bData.starRating || 3) - (aData.starRating || 3);
            case 'rating-asc':
              return (aData.starRating || 3) - (bData.starRating || 3);
            case 'price-asc':
              return (aData.priceFrom || 0) - (bData.priceFrom || 0);
            case 'price-desc':
              return (bData.priceFrom || 0) - (aData.priceFrom || 0);
            case 'name-asc':
              return aTitle.localeCompare(bTitle);
            case 'name-desc':
              return bTitle.localeCompare(aTitle);
            default:
              return 0;
          }
        });

        // Re-append sorted cards
        cards.forEach(card => grid.appendChild(card));
      });

      // Mobile filters toggle
      const mobileFiltersBtn = document.getElementById('mobileFiltersBtn');
      const filtersSidebar = document.querySelector('.filters-sidebar');
      const filtersOverlay = document.querySelector('.filters-overlay');
      const closeFiltersBtn = document.getElementById('closeFilters');
      const applyFiltersBtn = document.getElementById('applyFilters');

      const openMobileFilters = () => {
        filtersSidebar?.classList.add('open');
        filtersOverlay?.classList.add('active');
        document.body.style.overflow = 'hidden';
      };

      const closeMobileFilters = () => {
        filtersSidebar?.classList.remove('open');
        filtersOverlay?.classList.remove('active');
        document.body.style.overflow = '';
      };

      mobileFiltersBtn?.addEventListener('click', openMobileFilters);
      closeFiltersBtn?.addEventListener('click', closeMobileFilters);
      filtersOverlay?.addEventListener('click', closeMobileFilters);
      applyFiltersBtn?.addEventListener('click', closeMobileFilters);

      // Show more locations
      const showMoreBtn = document.getElementById('showMoreLocations');
      showMoreBtn?.addEventListener('click', () => {
        const locationList = document.querySelector('.location-list');
        locationList?.classList.toggle('expanded');
        showMoreBtn.textContent = locationList?.classList.contains('expanded')
          ? 'Show Less'
          : 'Show More Locations';
      });

      // Initial update
      updateItemCounts();
      updateLoadMoreButton();
    });
  </script>

</BaseLayout>
